using System;
using System.Collections.Generic;
using System.Linq;
using WebExpress.WebCore.Internationalization;
using WebExpress.WebCore.WebApplication;
using WebExpress.WebCore.WebComponent;
using WebExpress.WebCore.WebMessage;
using WebExpress.WebCore.WebPlugin;

namespace WebExpress.WebCore.WebEndpoint
{
    /// <summary>
    /// The endpoint manager manages WebExpress elements, which can be called with a URI (Uniform Resource Identifier).
    /// </summary>
    public sealed class EndpointManager : IEndpointManager, ISystemComponent
    {
        private readonly IComponentHub _componentHub;
        private readonly IHttpServerContext _httpServerContext;
        private readonly Dictionary<Type, EndpointRegistration> _registrations = [];

        /// <summary>
        /// An event that fires when an resource is added.
        /// </summary>
        public event EventHandler<IEndpointContext> AddResource;

        /// <summary>
        /// An event that fires when an resource is removed.
        /// </summary>
        public event EventHandler<IEndpointContext> RemoveResource;

        /// <summary>
        /// Returns all endpoints contexts.
        /// </summary>
        public IEnumerable<IEndpointContext> Endpoints => _registrations.Values.SelectMany(x => x.EndpointsResolver());

        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        /// <param name="componentHub">The component manager.</param>
        /// <param name="httpServerContext">The reference to the context of the host.</param>
        private EndpointManager(IComponentHub componentHub, IHttpServerContext httpServerContext)
        {
            _componentHub = componentHub;

            _httpServerContext = httpServerContext;

            _httpServerContext.Log.Debug
            (
                I18N.Translate("webexpress:endpointmanager.initialization")
            );
        }

        /// <summary>
        /// Registers an endpoint context type.
        /// </summary>
        /// <typeparam name="T">The type of the endpoint context.</typeparam>
        /// <param name="registration">The registration details containing the callback functions.</param>
        public void Register<T>(EndpointRegistration registration) where T : IEndpointContext
        {
            var type = typeof(T);
            if (!_registrations.ContainsKey(type))
            {
                _registrations[type] = registration;
            }
        }

        /// <summary>
        /// Removes the registration for a specific endpoint context type.
        /// </summary>
        /// <typeparam name="T">The type of the endpoint context.</typeparam>
        public void Remove<T>() where T : IEndpointContext
        {
            var type = typeof(T);
            _registrations.Remove(type);
        }

        //// <summary>
        /// Returns an enumeration of endpoint contexts.
        /// </summary>
        /// <param name="endpointType">The endpoint type.</param>
        /// <param name="applicationContext">The application context.</param>
        /// <returns>An enumeration of endpoint contexts.</returns>
        public IEnumerable<IEndpointContext> GetEndpoints(Type endpointType, IApplicationContext applicationContext = null)
        {
            return _registrations.SelectMany(x => x.Value.EndpointResolver(endpointType, applicationContext));
        }

        ///// <summary>
        ///// Creates a new instance or if caching is active, a possibly existing instance is returned.
        ///// </summary>
        ///// <param name="endpointContext">The endpoint context.</param>
        ///// <param name="uri">The uri.</param>
        ///// <param name="searchContext">The search context.</param>
        ///// <returns>The created endpoint.</returns>
        //private IEndpoint CreateEndpoint(IEndpointContext endpointContext, UriResource uri, SearchContext searchContext)
        //{
        //    if (endpointContext == null)
        //    {
        //        return null;
        //    }

        //    var type = endpointContext.GetType();

        //    if (_registrations.TryGetValue(type, out var registration))
        //    {
        //        return registration.Factory(endpointContext, uri, searchContext.Culture);
        //    }

        //    throw new InvalidOperationException($"No factory registered for type {type}");
        //}

        /// <summary>
        /// Handles a request and returns a response.
        /// </summary>
        /// <param name="request">The request to handle.</param>
        /// <param name="endpointContext">The context of the endpoint handling the request.</param>
        /// <returns>The response generated by the endpoint.</returns>
        public Response HandleRequest(Request request, IEndpointContext endpointContext)
        {
            var registration = _registrations
                .Where(x => x.Key == endpointContext?.GetType())
                .Select(x => x.Value)
                .FirstOrDefault();

            return registration?.HandleRequest(request, endpointContext);
        }

        /// <summary>
        /// Information about the component is collected and prepared for output in the log.
        /// </summary>
        /// <param name="pluginContext">The context of the plugin.</param>
        /// <param name="output">A list of log entries.</param>
        /// <param name="deep">The shaft deep.</param>
        public void PrepareForLog(IPluginContext pluginContext, IList<string> output, int deep)
        {
        }

        /// <summary>
        /// Release of unmanaged resources reserved during use.
        /// </summary>
        public void Dispose()
        {
        }
    }
}
